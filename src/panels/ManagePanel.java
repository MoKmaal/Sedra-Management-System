/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import Database.Connect;
import Database.Login;
import java.awt.Dimension;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sedra.Colors;
import static sedra.SedraUI.height;
import static sedra.SedraUI.width;

/**
 *
 * @author mohammed
 */
public class ManagePanel extends javax.swing.JPanel {

    /**
     * Creates new form LoginPanel
     */
    int day;
    int month;
    int year;

    public ManagePanel() throws SQLException {
        initComponents();
        System.out.println(dateChooserPanel1.getSelectedDate().getTime());
        setBounds(0, 0, 3 * width / 4, height);
        setSize(new Dimension(3 * width / 4, height));
        loginPane.setBounds(0, 0, 3 * width / 4, height / 2);
        grd.setBounds(0, height / 2, 3 * width / 4, height);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginPane = new javax.swing.JPanel();
        paymentListener = new javax.swing.JLabel();
        dateChooserPanel1 = new datechooser.beans.DateChooserPanel();
        dayPayment = new javax.swing.JLabel();
        YearPayment = new javax.swing.JLabel();
        monthPayment = new javax.swing.JLabel();
        grd = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        manageTable = new javax.swing.JTable();

        setLayout(null);

        loginPane.setBackground(Colors.PANELS_COLOR);
        loginPane.setForeground(new java.awt.Color(204, 204, 204));

        paymentListener.setBackground(new java.awt.Color(45, 33, 89));
        paymentListener.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        paymentListener.setForeground(Colors.LABELS_COLOR);
        paymentListener.setText("How much payment");
        paymentListener.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                paymentListenerMousePressed(evt);
            }
        });

        dateChooserPanel1.setCalendarBackground(new java.awt.Color(255, 255, 255));

        dayPayment.setBackground(new java.awt.Color(45, 33, 89));
        dayPayment.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        dayPayment.setForeground(Colors.LABELS_COLOR);
        dayPayment.setText("Day");
        dayPayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dayPaymentMousePressed(evt);
            }
        });

        YearPayment.setBackground(new java.awt.Color(45, 33, 89));
        YearPayment.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        YearPayment.setForeground(Colors.LABELS_COLOR);
        YearPayment.setText("Year");
        YearPayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                YearPaymentMousePressed(evt);
            }
        });

        monthPayment.setBackground(new java.awt.Color(45, 33, 89));
        monthPayment.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        monthPayment.setForeground(Colors.LABELS_COLOR);
        monthPayment.setText("Month");
        monthPayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                monthPaymentMousePressed(evt);
            }
        });

        javax.swing.GroupLayout loginPaneLayout = new javax.swing.GroupLayout(loginPane);
        loginPane.setLayout(loginPaneLayout);
        loginPaneLayout.setHorizontalGroup(
            loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dateChooserPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
            .addGroup(loginPaneLayout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(paymentListener)
                    .addGroup(loginPaneLayout.createSequentialGroup()
                        .addComponent(dayPayment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(monthPayment)
                        .addGap(47, 47, 47)
                        .addComponent(YearPayment)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        loginPaneLayout.setVerticalGroup(
            loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPaneLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(paymentListener, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dayPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(YearPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(dateChooserPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addContainerGap())
        );

        dateChooserPanel1.getAccessibleContext().setAccessibleName("");
        dateChooserPanel1.getAccessibleContext().setAccessibleDescription("");

        add(loginPane);
        loginPane.setBounds(0, 0, 760, 340);

        manageTable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        manageTable.setForeground(Colors.LABELS_COLOR);
        manageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Name", "Code", "Size", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(manageTable);
        if (manageTable.getColumnModel().getColumnCount() > 0) {
            manageTable.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout grdLayout = new javax.swing.GroupLayout(grd);
        grd.setLayout(grdLayout);
        grdLayout.setHorizontalGroup(
            grdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(grdLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                .addContainerGap())
        );
        grdLayout.setVerticalGroup(
            grdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(grdLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        add(grd);
        grd.setBounds(0, 350, 760, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void paymentListenerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentListenerMousePressed
        try {
            manageTable.print();
        } catch (PrinterException ex) {
            Logger.getLogger(ManagePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_paymentListenerMousePressed

    private void dayPaymentMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dayPaymentMousePressed
        // TODO add your handling code here:
        day = dateChooserPanel1.getSelectedDate().getTime().getDate();
        month = dateChooserPanel1.getSelectedDate().getTime().getMonth() + 1;
        year = dateChooserPanel1.getSelectedDate().getTime().getYear() + 1900;

        String time = String.format("%d-%02d-%02d", year, month, day);
        System.out.println(time);
        getPayment(time);
        try {
            showReport(time);
        } catch (SQLException ex) {
            Logger.getLogger(ManagePanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_dayPaymentMousePressed
    public void showReport(String time) throws SQLException {
        String printInvoiceQuery;
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs;
        printInvoiceQuery = "SELECT itemID,salesQuantity,"
                + "recID,Size,customerID FROM Sales"
                + " where orderTime LIKE '%" + time + "%'";
        System.out.println(printInvoiceQuery);
        conn = DriverManager.getConnection(Connect.URL, Connect.HOST_NAME, Connect.PASSWORD);
        stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        Statement stmt1 = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

        rs = stmt.executeQuery(printInvoiceQuery);
        ResultSet rs1;
        int invoiceIndex = 0;

        boolean var = false;
        int tempID = 0;
        String s5 = "";
        DefaultTableModel dtm = (DefaultTableModel) manageTable.getModel();
        dtm.setRowCount(0);

        while (rs.next()) {
            if (var == false) {
                tempID = rs.getInt("customerID");
            }

            invoiceIndex++;
            String s0;
            String s1 = rs.getString("itemID");
            String s2 = rs.getString("Size");
            String s3 = rs.getString("salesQuantity");
            String sf;
            if (tempID != rs.getInt("customerID")) {
                s0 = String.valueOf(rs.getInt("customerID"));
                rs1 = stmt1.executeQuery("SELECT customerName From Customer WHERE customerID=" + s0);
                rs1.next();
                sf = rs1.getString(1);
            } else {
                s0 = "";
                sf = "";
            }
            if (var == false) {
                System.out.println("var false");
                s0 = String.valueOf(tempID);
                rs1 = stmt1.executeQuery("SELECT customerName From Customer WHERE customerID=" + s0);
                rs1.next();
                sf = rs1.getString(1);

                var = true;
            }

            Object data[] = {sf, s1, s2, s3};
            if (!String.valueOf(tempID).equalsIgnoreCase(String.valueOf(rs.getString("customerID")))) {
                Object data1[] = {"", "", "", "", "", ""};
                invoiceIndex++;
                dtm.addRow(data1);

                tempID = Integer.parseInt(s0);

            }

            dtm.addRow(data);

        }

    }
    private void YearPaymentMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_YearPaymentMousePressed
        // TODO add your handling code here:
        try {
            if (Login.getEmpID() == 2) {

                day = dateChooserPanel1.getSelectedDate().getTime().getDate();
                month = dateChooserPanel1.getSelectedDate().getTime().getMonth() + 1;
                year = dateChooserPanel1.getSelectedDate().getTime().getYear() + 1900;

                String time = String.format("%d", year);
                getPayment(time);
                try {
                    showReport(time);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
                try {
                    NewJFrame1 frame1 = new NewJFrame1(time);
                    frame1.setVisible(true);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "You don't have permission to access this data");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Login First  " + e.getMessage());
        }
    }//GEN-LAST:event_YearPaymentMousePressed

    private void monthPaymentMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthPaymentMousePressed
        // TODO add your handling code here:
        try {
            if (Login.getEmpID() == 2) {

                day = dateChooserPanel1.getSelectedDate().getTime().getDate();
                month = dateChooserPanel1.getSelectedDate().getTime().getMonth() + 1;
                year = dateChooserPanel1.getSelectedDate().getTime().getYear() + 1900;

                String time = String.format("%d-%02d", year, month);
                getPayment(time);
                try {
                    showReport(time);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
                try {
                    NewJFrame1 frame1 = new NewJFrame1(time);
                    frame1.setVisible(true);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "You don't have permission to access this data");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Please Login First  " + e.getMessage());
        }

    }//GEN-LAST:event_monthPaymentMousePressed

    public void getPayment(String time) {
        Connection conn = null;
        Statement stmt = null;
        float custoer_payment = 0;
        float doctor_payments = 0;

        try {
            // TODO add your handling code here:
            conn = DriverManager.getConnection(Connect.URL, Connect.HOST_NAME, Connect.PASSWORD);
            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            day = dateChooserPanel1.getSelectedDate().getTime().getDate();
            month = dateChooserPanel1.getSelectedDate().getTime().getMonth() + 1;
            year = dateChooserPanel1.getSelectedDate().getTime().getYear() + 1900;
            int quan = 0;
            time = "%".concat(time).concat("%");

            ResultSet res = stmt.executeQuery("SELECT SUM(Store.itemDocPrice*Sales.salesQuantity)AS price,SUM(salesQuantity) FROM Sales,Store WHERE"
                    + " orderTime Like '" + time + "' AND Store.itemID = Sales.itemID AND Store.itemSize=Sales.Size And Sales.customerID IN (Select customerID"
                    + " from Customer where costomerType = 'Customer')");
            if (res.next()) {
                custoer_payment = res.getFloat(1);
                quan += res.getInt(2);
            }
            res = stmt.executeQuery("SELECT SUM(Store.itemCustomerPrice*Sales.salesQuantity)AS price, SUM(salesQuantity) FROM Sales,Store WHERE"
                    + " orderTime Like '" + time + "' AND Store.itemID = Sales.itemID AND Store.itemSize=Sales.Size And Sales.customerID IN (Select customerID"
                    + " from Customer where costomerType = 'Doctor')");
            if (res.next()) {
                doctor_payments = res.getFloat(1);
                quan += res.getInt(2);

            }
            res = stmt.executeQuery("SELECT salesPaid  FROM Sales where orderTime LIKE'" + time + "' GROUP BY recID ");

            float total = 0;
            while (res.next()) {
                total += res.getFloat(1);
            }

            JOptionPane.showMessageDialog(this, "لقد قمت ببيع ما يعادل" + (custoer_payment + doctor_payments) + "منهم  "
                    + doctor_payments + "للدكاترة " + " لكنك تحصلت فقط على مبلغ" + total + "نظير بيع " + quan + " قطعة");

        } catch (SQLException ex) {
            ex.printStackTrace();

            JOptionPane.showMessageDialog(this, "Unable to get orders " + ex.getMessage());
        } finally {
            try {
                stmt.close();
                conn.close();

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Unable to close connection " + ex.getMessage());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel YearPayment;
    private datechooser.beans.DateChooserPanel dateChooserPanel1;
    private javax.swing.JLabel dayPayment;
    private javax.swing.JPanel grd;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel loginPane;
    public static javax.swing.JTable manageTable;
    private javax.swing.JLabel monthPayment;
    private javax.swing.JLabel paymentListener;
    // End of variables declaration//GEN-END:variables
}
